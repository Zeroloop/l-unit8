<?lassoscript//=============================================================================//// example of testCase code////.............................................................................define_type('test_assertions', 'unit_testCase');//============================================================================////		->	Setup////............................................................................	define_tag:'setup';		//	Use internal test	/define_tag;//============================================================================////		->	Tests to run////............................................................................	define_tag:'test_postitives';		// Single Params		self->assert_isTrue(true);		self->assert_isFalse(false);		self->assert_isNotEmpty(' "test" ');		self->assert_isNotNull(' "test" ');		self->assert_isBoolean(true);		self->assert_isInteger(1);		self->assert_isDecimal(1.1);		self->assert_isString(' "test" ');		self->assert_isBytes(bytes(' "test" '));		self->assert_isPair(pair('one'='two'));		self->assert_isArray(array);		self->assert_isMap(map);		self->assert_isSet(set);		self->assert_isList(list);		self->assert_isStack(stack);		self->assert_isQueue(queue);		self->assert_isPriorityQueue(priorityQueue);		self->assert_isSeries(series(-from=1,-to=5));		self->assert_isTreeMap(treeMap);		//self->assert_isFile(file('))		//self->assert_isImage(image)		self->assert_isXML(xml);				// Multiple Params		self->assert_isTypeOf(array,'array');		self->assert_isDecimalInRange(2.2,1.0,3.0);		self->assert_isIntegerInRange(2,1,3);		self->assert_isArraySizeInRange(array(1,2),1,3);		self->assert_isSizeInRange(' "test" ',2,6);				self->assert_isDecimalMin(2.0,1.0);		self->assert_isIntegerMin(2,1);		self->assert_isArraySizeMin(array('one','two'),1);		self->assert_isSizeMin(' "test" ',3);				self->assert_isDecimalMax(2.2,3);		self->assert_isIntegerMax(2,3);		self->assert_isArraySizeMax(array('one','two'),3);		self->assert_isSizeMax(' "test" ',6);				self->assert_isArraySizeOf(array('one','two'),2);		self->assert_isSizeOf(' "test" ',4);				self->assert_isStringContaining(' "test" ','es');		self->assert_isArrayContaining(array('one','two'),'one');		self->assert_isSetContaining(set('one','two'),'one');		self->assert_isListContaining(list('one','two'),'one');		self->assert_isMapContaining(map('one'='two','three'='four'),'one');		self->assert_isTreeMapContaining	(treeMap('one'='two','three'='four'),'one');					/define_tag;	define_tag:'test_negaitives';		// Single Params		self->assert_isTrue(false);		self->assert_isFalse(true);		self->assert_isNotEmpty('');		self->assert_isNotNull(null);		self->assert_isBoolean('Nope');		self->assert_isInteger('Blah');		self->assert_isDecimal(1);		self->assert_isString(2.3);		self->assert_isBytes('test');		self->assert_isPair('two');		self->assert_isArray(map);		self->assert_isMap(array);		self->assert_isSet(null);		self->assert_isList(array);		self->assert_isStack(string);		self->assert_isQueue(list);		self->assert_isPriorityQueue(map);		self->assert_isSeries(array);		self->assert_isTreeMap(string);		//self->assert_isFile(file('/index.lasso''))		//self->assert_isImage(image)		self->assert_isXML(map);				// Multiple Params		self->assert_isTypeOf(map,'array');		self->assert_isDecimalInRange(2.2,1.0,2.0);		self->assert_isIntegerInRange(2,1,1);		self->assert_isArraySizeInRange(array(1,2),1,1);		self->assert_isSizeInRange(' "test" ',2,3);				self->assert_isDecimalMin(0.0,1.0);		self->assert_isIntegerMin(0,1);		self->assert_isArraySizeMin(array('one','two'),3);		self->assert_isSizeMin(' "test" ',8);				self->assert_isDecimalMax(2.2,2);		self->assert_isIntegerMax(2,1);		self->assert_isArraySizeMax(array('one','two'),1);		self->assert_isSizeMax(' "test" ',3);				self->assert_isArraySizeOf(array('one','two'),1);		self->assert_isSizeOf(' "test" ',2);				self->assert_isStringContaining(' "test" ','nope');		self->assert_isArrayContaining(array('one','two'),'three');		self->assert_isSetContaining(set('one','two'),'three');		self->assert_isListContaining(list('one','two'),'three');		self->assert_isMapContaining(map('one'='two','three'='four'),'five');		self->assert_isTreeMapContaining	(treeMap('one'='two','three'='four'),'five');					/define_tag;	/define_type;?>