<?LassoScript define_tag:'isAjax',	-description 	= 'Returns true if call is ajax';	return: client_headers >> 'XMLHttpRequest';/define_tag;	define_type: 'code','map',-prototype;	define_tag:'_unknownTag';		return:@self->parent->find(tag_name);	/define_tag;		define_tag:'onCreate';		self->parent->removeAll;		iterate:params,local('param');			#param->isA('pair')			? 	self->load(					-name 	= #param->first,					-file 		= #param->second				);		/iterate;	/define_tag;		define_tag: 'insert';			iterate:params,local('param');			select:#param->type;				case:'pair';					local('name') = string(#param->first)->removeLeading('-')&;					self->parent->insert(#name = @string(#param->second)->removeLeading(bom_utf8)&);			/select;		/iterate;	/define_tag;		define_tag: 'load',		-required 	= 'name',		-required 	= 'file',		-priority 	= 'replace';				self->parent->insert(#name = @include_raw(local('file'))->removeLeading(bom_utf8)&);	/define_tag;		/define_type;define_type:'blackHole',-priority='replace';		local('path')=array;		define_tag:'onCreate';		debug:'BlackHole > onCreate',-open,-title;		handle_error;debug(error_msg,-error);/handle_error;		handle;debug(-close);/handle;	/define_tag;		define_tag:'_unknownTag';		self->path->insert(tag_name);		debug:self->path->join(' > ');		return:@self;	/define_tag;	/define_type;define_tag:  'param',				    -namespace='client_',				    -priority='replace',				    -description='Equivalent of [action_param], only for [client_params]. Safe to use inside inlines.';				        fail_if:!params->size || !params->first->isa('string'),  -1,  '[client_param] requires at least a string as a parameter.';        local('key' = @params->first);                if:local_defined('count');        local('out' = client_params->find(#key)->size);    else;		        params->size >= 2 && params->get(2)->isa('integer') ? local('index' = @params->get(2)) | local('index' = 1);				if:params->size == 1;					local:'out'=array;						iterate:client_params->find(#key),local('pair');				#out->insert(#pair->isA('pair') ? #pair->second | null);			/iterate;						#out = #out->join('\r');			        else:client_params->find(#key)->size >= #index;            local:'out' = client_params->find(#key)->get(#index)->get(2);        else;            local:'out' = '';        /if;    /if;        return:#out;/define_tag;define_tag: 'params',				    -namespace 	='client_',				    -priority 		='replace',				    -description 	='Returns an array that is a combination of [client_getparams] and [client_postparams].';		var_defined('_client_params') ? return:@$_client_params;	return(	   var('_client_params') := 	array->	merge(client_getparams)					   								&		merge(client_postparams)					   								&	);/define_tag;?>