<?lassoscriptcontent_type:'text/plain';// Define L-Revolverinclude(response_filePath -> split('/') -> removeLast & join('/') '/revolver.ctyp');// Simple timer for examplesdefine_tag:'since';	!	var_defined('_lastMSec')	?	var('_lastMSec') = date_mSec;	handle;$_lastMSec = date_mSec;/handle;	return(decimal((date_Msec - $_lastMSec)*0.001)->setFormat(-precision=3)&);/define_tag;//	Kick start timernull(since);//============================================================================
//
//		->	Basic Loading & Firing Example
//
//............................................................................local('revolver') = revolver;//	Load up some dummy events#revolver->load( {sleep:100} );#revolver->load( {sleep:100} );#revolver->load( {sleep:100} );'Three 100ms tasks\r';//	Fire inline'----------------------------------------------------------> Fire - Three 100ms tasks inline\r';#revolver->fire;since ' - Inline time\r';//	Fire entire revolver as async'----------------------------------------------------------> Fire(-async)\r';#revolver->fire(-async);since ' - Launch Async Revolver\r';#revolver->wait(1000) ? since' - Waited for async revolver: '| since' - Gave up waiting for async revolver: ';'Completed = '#revolver->completed'\r';//	Fire independent async threads'----------------------------------------------------------> Fire(-asyncThreads)\r';#revolver->fire(-asyncThreads);since ' - Launched Async threads\r';#revolver->wait(1000) ? since' - Waited for async threads: '| since' - Gave up waiting for async threads: ';'Completed = '#revolver->completed'\r';//============================================================================
//
//		->	On the fly methods
//
//............................................................................//	Fire independent async threads'---------------------------------------------------------On the fly method\r';// The below could be run within any typelocal('myMethod') = {     sleep:500;     local('now') = date_mSec;     log_critical('Type: 'self->type', locals: 'locals);};local('revolver') = revolver;loop:5;    #revolver->load(                    -task = #myMethod,                    -owner = array,                    -params = array(-someLocal = 'Hello: 'date_mSec)    );/loop;// Fire them independently#revolver->fire(-asyncThreads);null(#revolver->wait(2000));since' - 5x 500 millisecond tasks\r';//============================================================================
//
//		->	A dataBin ctyp using L-Revolver
//
//............................................................................'---------------------------------------------------------dataBin\r';define_type:'dataBin','array';    local('revolver') = revolver;    // queueURL takes a URL and loads it as a Revolver task    define_tag:'queueURL',-required='url';        self->'revolver'->load(            -task = @{self->insert(include_url(#url))},            -owner = @self,            -params = @array(-url=#url)        );    /define_tag;    // getData simply fires the revolver and waits for all the results    define_tag:'getData';        self->revolver->fire(-asyncThreads);        self->revolver->wait(10000);        return(self->parent);    /define_tag;/define_type;local('dataBin') = dataBin;// Queue some URLs#dataBin->queueURL('http://www.google.com');#dataBin->queueURL('http://www.yahoo.com');#dataBin->queueURL('http://www.msn.com');// Get the data'Included '#dataBin->getData->size' URLs - 'since'\r';//============================================================================
//
//		->	Some other firing examples
//
//............................................................................local('revolver') = revolver;//	Load up some dummy events#revolver->load( {sleep:100} );#revolver->load( {sleep:100} );#revolver->load( {sleep:100} );//	Fire queued async threads'---------------------------------------------------------Another firing examples----------------------------------------------------------> Fire(-asyncThreads,-queueThreads)\r';#revolver->fire(-asyncThreads,-queueThreads);since ' - Executed Queued Async threads\r';#revolver->wait(1000) ? since' - Waited for async threads: '| since' - Gave up waiting for async threads: ';'Completed = '#revolver->completed'\r';?>