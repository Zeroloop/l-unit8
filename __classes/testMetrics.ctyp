<?LassoScript 		define_type:'testMetrics', -prototype;	local(		'suiteName'	= string,		'suiteStats'		= map,		'testResults'	= map,		'testTimes'		= map,		'cachedResults' = null,		'caseList'		= array,		'caseFiles'		= null,				'testCase'		= string,				'caseMethodStats'	= map,			'appMethodStats'	= map,							'html'				= code(									'view' 			= unit_htmlPath'metrics.htm',									'table' 			= unit_htmlPath'metricsTable.htm' 								)	);			define_tag:'onCreate',			-required = 'suiteName',-type='string',			-required = 'suiteStats',-type='array',			-required = 'testResults',-type='map',			-required = 'testTimes',-type='map';					self->'suiteName' = #suiteName;			self->'suiteStats' = @#suiteStats;			self->'testResults' = @#testResults;			self->'testTimes' = @#testTimes;				/define_tag;						define_tag:'onConvert';			protect;				handle_error;					unit_contoller->error(self->type' > 'tag_name' - 'error_msg);				/handle_error;				return:self->view;			/protect;		/define_tag;		 /*		HTML Output
|___________________________________________________________________*/				define_tag:'view';				return:process(self->html->view);		/define_tag;				define_tag:'table';				return:process(self->html->table);		/define_tag;		 /*		methodInfo - lazy Map
|___________________________________________________________________*/				define_type:'methodInfo','map';						define_tag:'onCreate',-optional='map';				self->parent->removeAll;				local('map')->isA('map')				?	self->parent->insertFrom(local('map')->iterator);			/define_tag;						define_tag:'_unknownTag';				local('result') = self->parent->find(tag_name);				(#result->size ? true | #result > 0)				?	return: tag_name': '(#result->isA('array') ? #result->join(', ')|#result);			/define_tag;				/define_type;		 /*		get Tags - trawl suiteStats
|___________________________________________________________________*/				define_tag:'getTestResults';					!	self->'cachedResults'->isA('null')			?	return:@self->'cachedResults';						local(				'results' = map,				'method' = string 			);							iterate:self->testResults,local('testCaseResult');				protect;					!	self->isCurrentTestCase(#testCaseResult->name) 					?	loop_continue;					iterate:#testCaseResult->value->keys,#method;						iterate:#testCaseResult->value->find(#method),local('result');							#results->insert(#testCaseResult->name'->'#method'->'#result->name = #result->value);						/iterate;					/iterate;				/protect;			/iterate;			return(self->'cachedResults':=#results);		/define_tag;		define_tag:'getProcessTimes';			self->'testCase'			?	return:array(self->testTimes->find(self->'testCase'))			|	return:self->testTimes->values;		/define_tag;				define_tag:'getAssertions';					local('assertions') = array;			iterate:self->suiteStats,local('testCaseMap');				protect;					local('className')=#testCaseMap->find('testClass')->find('className');										!	self->isCurrentTestCase(#className)					?	loop_continue;					iterate:#testCaseMap->find('testClass')->find('methodStats'),local('methodStats');						#assertions->insertFrom(#methodStats->second->find('assertions')->iterator);					/iterate;									/protect;			/iterate;			return:#assertions;		/define_tag;						define_tag:'getClasses',-required='for',-type='string';					//	For = testClass or appClass					local('testCases') = array;			iterate:self->suiteStats,local('testCaseMap');				protect;					local('className')=#testCaseMap->find(#for)->find('className');					!	self->isCurrentTestCase(#className)					?	loop_continue;					#testCases->insert(#testCaseMap->find(#for)->find('className'));				/protect;			/iterate;			return:#testCases;		/define_tag;		define_tag:'getLineCount',-required='for',-type='string';					//	For = testClass or appClass					local('count') = integer;			iterate:self->suiteStats,local('testCaseMap');				protect;					local('className')=#testCaseMap->find(#for)->find('className');					!	self->isCurrentTestCase(#className)					?	loop_continue;					#count += integer(#testCaseMap->find(#for)->find('lineCount'));				/protect;			/iterate;			return:#count;		/define_tag;		define_tag:'getClassFiles',-required='for',-type='string';			//	For = testClass or appClass			local('testCaseFiles') = array;			iterate:self->suiteStats,local('testCaseMap');				protect;					local('className')=#testCaseMap->find(#for)->find('className');					!	self->isCurrentTestCase(#className) 					?	loop_continue;					#testCaseFiles->insert(#testCaseMap->find(#for)->find('fileName'));				/protect;			/iterate;			return:#testCaseFiles;		/define_tag;		define_tag:'getMethods',-required='for',-type='string';			//	For = testClass or appClass			local('testMethods') = array;						#for == 'appClass'			?	local('target') = @self->'appMethodStats' 			|	local('target') = @self->'caseMethodStats';									iterate:self->suiteStats,local('testCaseMap');				protect;					local('className')=#testCaseMap->find(#for)->find('className');					!	self->isCurrentTestCase(#className)					?	loop_continue;										iterate:#testCaseMap->find(#for)->find('methodStats'),local('method');						#target->insert(#className'->'#method->name=#method->value);						#testMethods->insert(#method->name);					/iterate;				/protect;			/iterate;			return:#testMethods;				/define_tag;				define_tag:'getMethodInfo',			-required='for',-type='string',			-required='method',-type='string';			//	For = testClass or appClass								if:#for == 'appClass';				local('target') = @self->'appMethodStats';				local('search') = string(self->'testCase')->removeLeading('test_')&;			else;				local('target') = @self->'caseMethodStats';				local('search') = string(self->'testCase');			/if;						return:self->methodInfo(#target->find(#search'->'#method));					/define_tag;		 /*		Set testCase - filter results
|___________________________________________________________________*/				define_tag:'setTestCase',			-optional ='testCase';			self->'cachedResults' = null;			self->'testCase' = string(local('testCase'));					/define_tag;				define_tag:'isCurrentTestCase',			-optional = 'testCase';						!	self->'testCase'			?	return:true;						return:#testCase == self->'testCase' || ('test_'#testCase) == self->'testCase';					/define_tag;				define_tag:'hasUntested';			return:self->unTestedMethods->size > 0;		/define_tag; /*	Get short cuts|___________________________________________________________________*/						define_tag:'testCases';			return:@self->getClasses(-for='testClass');		/define_tag;					define_tag:'testFiles';			return:@self->getClassFiles(-for='testClass');		/define_tag;					define_tag:'testMethods';			return:@self->getMethods(-for='testClass');		/define_tag;			define_tag:'testMethodInfo',-required='method',-type='string';				return:@self->getMethodInfo(-for='testClass',-method=#method);		/define_tag;		define_tag:'appClasses';			return:@self->getClasses(-for='appClass');		/define_tag;					define_tag:'appFiles';			return:@self->getClassFiles(-for='appClass');		/define_tag;					define_tag:'appMethods';			return:@self->getMethods(-for='appClass');		/define_tag;			define_tag:'appMethodInfo',-required='method',-type='string';				return:@self->getMethodInfo(-for='appClass',-method=#method);		/define_tag;		define_tag:'unTestedMethods';			local(				'tested' = self->testMethods,				'untested' = array 			);					iterate:self->appMethods,local('method');				#tested !>> 'test_'#method ? #untested->insert(#method);			/iterate;					return:@#untested;		/define_tag;			 /*		Stat Calculations|___________________________________________________________________*/					define_tag:'calcTotalTasks';			protect;				return:self->getAssertions->size;			/protect;		/define_tag;		define_tag:'calcTasksTested';			protect;				return:self->getTestResults->keys->size;			/protect;		/define_tag;		define_tag:'calcTasksPassed';			local('count') = 0;			iterate:self->getTestResults->values,local('methodResult');				protect;#methodResult->result == 'true' ? #count+=1;/protect;			/iterate;			return:#count;		/define_tag;				define_tag:'calcTasksCrashed';			local('count') = 0;			iterate:self->getTestResults->values,local('methodResult');				protect;#methodResult->result->isA('null') ? #count+=1;/protect;			/iterate;			return:#count;		/define_tag;				define_tag:'calcTasksFailed';			local('count') = 0;			iterate:self->getTestResults->values,local('methodResult');				protect;#methodResult->result == 'false' ? #count+=1;/protect;			/iterate;			return:#count;		/define_tag;		define_tag:'calcTotalTime';			local('count') = 0.000;			iterate:self->getProcessTimes,local('time');				protect;#count+=integer(#time);/protect;			/iterate;			return:#count*0.001;		/define_tag;		define_tag:'calcTaskTime';			local('count') = 0.000;			iterate:self->getTestResults->values,local('methodResult');				protect;#count+=decimal(#methodResult->time);/protect;			/iterate;			return:#count*0.001;		/define_tag;		define_tag:'calcMethodCoverage';			protect;				return:math_round((self->testMethods->size*1.0)/self->appMethods->size*100,1);			/protect;		/define_tag;		define_tag:'calcLineCoverage';			protect;				return:math_round((self->calcTestLines*1.0)/self->calcAppLines*100,1);			/protect;		/define_tag;				define_tag:'calcTestLines';			return:@self->getLineCount(-for='testClass');		/define_tag;		define_tag:'calcAppLines';			return:@self->getLineCount(-for='appClass');		/define_tag;		define_tag:'calcWarnings';			local('appFiles') = self->appFiles;							iterate:#appFiles,local('file');				local('file') == string 				?	return: 'TestCase->getClass empty.<br/>Metrics may not be accurate.';			/iterate;			!	#appFiles->size			?	return: 'Missing appClass file, please<br/>check the getClass tag.';					return:string;		/define_tag;				/define_type;	?>